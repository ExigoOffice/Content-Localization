using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Text;
using System.Threading.Tasks;

namespace Content.Localization
{
    public class ContentClassGenerator : IContentClassGenerator
    {
        private readonly ContentClassGeneratorOptions _options;

        public ContentClassGenerator(ContentClassGeneratorOptions options )
        {
            _options = options;
        }

        public string GetFullFileName()
        {
            return Path.Combine(_options.Location, _options.ClassName + ".cs");
        }

        public string Generate(ContentVersion version, IEnumerable<ContentItem> items)
        {
            if (items is null)
            {
                throw new ArgumentNullException(nameof(items));
            }

            var sb = new StringBuilder();
            sb.Append($@"
// AutoGenerated File 
// Version: {version?.Version}
// ReleaseDate: {version?.ReleaseDate}
namespace {_options.Namespace}
{{
    using System;
    using Content.Localization;
    public static class {_options.ClassName}
    {{
        public static IContentLocalizer Content {{ get; set; }}
");
            foreach (var item in items)
            {
                sb.AppendLine(
                    !item.Value.Contains("<exigocarousel>")
                        ? $"        public static string {item.Name} => Content[\"{item.Name}\"];"
                        : "//Carousel coming here");
            }

            sb.Append($@"
        [Obsolete(""Use Content[name] instead"")]
        public static string GetObject(string name)
        {{
            return Content[name];
        }} 
    }}
}}");
            return sb.ToString();
        }

        public async Task<ContentVersion> GetExistingVersionAsync()
        {
            FileInfo fi = new FileInfo(GetFullFileName());
            if (!fi.Exists)
                return null;

            var version = new ContentVersion();

            using var reader = fi.OpenText();

            for (int i = 0; i < 5; i++)
            {
                var line = await reader.ReadLineAsync().ConfigureAwait(false);

                if (line==null)
                    break;

                var versionSearch       = "// Version: ";
                var dateSearch          = "// ReleaseDate: ";

                if (line.StartsWith(versionSearch, StringComparison.InvariantCulture))
                    version.Version     = line.Substring(versionSearch.Length);
                
                if (line.StartsWith(dateSearch, StringComparison.InvariantCulture))
                    version.ReleaseDate = DateTime.Parse(line.Substring(dateSearch.Length), CultureInfo.InvariantCulture);
            }

            return version;
        }



        public async Task GenerateAndSaveIfChangedAsync(ContentVersion version, IContentSource contentSource)
        {
            if (contentSource is null)
            {
                throw new ArgumentNullException(nameof(contentSource));
            }

            var existing = await GetExistingVersionAsync()
                .ConfigureAwait(false);

            if (existing?.Version != version?.Version || existing?.ReleaseDate?.ToString(CultureInfo.InvariantCulture) != version?.ReleaseDate?.ToString(CultureInfo.InvariantCulture))
            {
                if (!Directory.Exists(_options.Location))
                    Directory.CreateDirectory(_options.Location);

                File.WriteAllText(GetFullFileName(), 
                    Generate(version, 
                        await contentSource.GetAllContentItemsAsync(_options.DefaultCultureCode, null)
                            .ConfigureAwait(false)));
            }
        }
    }
}
